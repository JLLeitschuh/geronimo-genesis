/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

options {
    STATIC = false;
    UNICODE_INPUT = true;
    ERROR_REPORTING = true;
}

///////////////////////////////////////////////////////////////////////////////

PARSER_BEGIN(SyntaxParser)

package org.apache.geronimo.gshell.syntax.parser;

import java.io.Reader;
import java.io.StringReader;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.apache.commons.lang.NullArgumentException;

/**
 * GShell syntax parser.
 *
 * @version $Rev$ $Date$
 */
public class SyntaxParser
{
    private static final Log log = LogFactory.getLog(SyntaxParser.class);

    public SyntaxParser() {
        this(new StringReader(""));
    }
    
    public CommandLine parse(final Reader reader) throws ParseException {
        if (reader == null) {
            throw new NullArgumentException("reader");
        }

        if (log.isDebugEnabled()) {
            log.debug("Parsing from reader: " + reader);
        }

        this.ReInit(reader);

        CommandLine root = CommandLine();
        
        if (log.isDebugEnabled()) {
            log.debug("Root node: " + root);
        }
        
        return root;
    }
}

PARSER_END(SyntaxParser)

///////////////////////////////////////////////////////////////////////////////

//
// WHITE SPACE
//

<DEFAULT> SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

//
// COMMENTS
//

<DEFAULT> SPECIAL_TOKEN :
{
    < COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

//
// STRINGS
//

<DEFAULT> TOKEN :
{
    < STRING:
      (   (~["\"","\\"," ","\t","\n","\r","\f",";","\"","'"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\"",";"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )+
    >
|
    < OPAQUE_STRING:
      "'"
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
    >
|
    < QUOTED_STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
    >
}

//
// SEPARATORS
//

<DEFAULT> TOKEN :
{
    < SEMICOLON: ";" >
}


///////////////////////////////////////////////////////////////////////////////

void CommandLine() : {}
{
    (
        Expression() ( ";" [ Expression() ] )* | <EOF>
    )
}

void Expression() : {}
{
    ( Argument() )+
}

void Argument() : {}
{
    AnyString()
}

void AnyString() : {}
{
    QuotedString() | QpaqueString() | PlainString()
}

void QuotedString() : {}
{
    <QUOTED_STRING>
}

void QpaqueString() : {}
{
    <OPAQUE_STRING>
}

void PlainString() : {}
{
    <STRING>
}

