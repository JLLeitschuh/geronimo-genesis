#!/bin/sh
##
## $Rev: 1667 $ $Date: 2006-11-10 01:37:31 -0800 (Fri, 10 Nov 2006) $
##

PROGNAME=`basename "$0"`
DIRNAME=`dirname "$0"`

BASEDIR=`cd "$DIRNAME" && pwd`
DEPDIR="$BASEDIR/dependencies"
OUTDIR="$BASEDIR/output"

warn() {
    echo "${PROGNAME}: $*"
}

die() {
    warn $*
    exit
}

usage() {
    cat <<EOF
Build harness tool

usage: $PROGNAME [options] <pom> [--] [mvn options]

options:
    -h,--help           Display this help message
    -j,--java version   Set the JAVA_HOME according to version
    --                  Stop processing options

EOF
}

if [ "x$1" = "x" ]; then
    usage
    exit
fi

pom=""
args=""

assertOptionArg() {
    if [ "x$2" = "x" ]; then
        echo "Option '$1' requires an argument"
        exit 2
    fi
}

while [ "x$1" != "x" ]; do
    case "$1" in
        -h|--help)
            usage
            exit
            ;;
        
        -j|--java)
            assertOptionArg $1 $2
            ver=$2; shift
            case "$ver" in
                1.4)
                    export JAVA_HOME="$JAVA_HOME_1_4"
                    ;;
                
                1.5|5)
                    export JAVA_HOME="$JAVA_HOME_1_5"
                    ;;
                
                *)
                    die "Unsupported java version: $ver"
                    ;;
            esac
            
            if [ ! -d "$JAVA_HOME" ]; then
                tmp=`echo $ver | tr . _`
                die "Unable to configure Java to use $ver; missing JAVA_HOME_$tmp"
            fi
            ;;
        
        --)
            shift
            if [ "x$args" = "x" ]; then
                args="$*"
            else
                args="$args $*"
            fi
            break
            ;;
        
        -*)
            if [ "x$args" = "x" ]; then
                args="$1"
            else
                args="$args $1"
            fi
            ;;
        
        *)
            if [ "x$pom" = "x" ]; then
                pom="$1"
            else
                die "Only one pom may be configured"
            fi
            ;;
    esac
    shift
done

# Require a pom to continue
if [ "x$pom" = "x" ]; then
    die "Missing pom"
fi

echo "Pom: $pom"
echo "Args: $args"

# Install dependency artifacts
if [ -d "$DEPDIR" ]; then
    echo "Installing dependency artifacts from: $DEPDIR"
    
    repos=`ls "$DEPDIR"`
    echo "Dependency repositories: $repos"
    
    for repo in $repos; do
        dir="$DEPDIR/$repo"
        echo "Installing dependencies from: $dir"
        cp -rfv "$dir/"* "$HOME/.m2/repository"
    done
else
    echo "No dependency artifacts to install"
fi

# Clean the output directory
rm -rf "$OUTDIR"

# Execute Maven
mvn --file "$pom" -Doutput.dir="$OUTDIR" $args
status=$?
echo "Maven exit status: $status"

# Verify outputs
if [ -d "$OUTDIR" ]; then
    count=`find "$OUTDIR" -type f | wc -l | awk '{print $1}'`
    echo "Found $count output files:"
    find "$OUTDIR" -type f
else
    echo "No output files found"
fi

# Exit with Maven's status
exit $status
